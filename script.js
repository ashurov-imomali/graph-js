k =  20;
function addRow() {
  const table = document.querySelector("#edges-table tbody");
  const newRow = document.createElement("tr");

  newRow.innerHTML = `
  <td>${k++}</td>
  <td><input type="number" min="1" /></td>
    <td><input type="number" min="1" /></td>
      <td><button class="delete-btn" onclick="deleteRow(this)">üóëÔ∏è</button></td>
    `;

  table.appendChild(newRow);
}


function deleteRow(button) {
  const row = button.parentElement.parentElement;
  row.parentElement.removeChild(row);
  k--;
  drawGraph();
}

function drawGraph() {
  const rows = document.querySelectorAll("#edges-table tbody tr");
  const edgesData = [];
  const nodeSet = new Set();

  rows.forEach((row, index) => {
    const inputs = row.querySelectorAll("input");
    const from = parseInt(inputs[0].value);
    const to = parseInt(inputs[1].value);

    if (!isNaN(from) && !isNaN(to)) {
      edgesData.push({ from, to, label: `${index + 1}` });
      nodeSet.add(from);
      nodeSet.add(to);
    }
  });

  const nodes = Array.from(nodeSet).map(id => ({
    id,
    label: `${id}`
  }));

  const edges = edgesData.map(edge => ({
    from: edge.from,
    to: edge.to,
    arrows: 'to',
    label: edge.label,
    font: { align: 'middle' }
  }));

  const container = document.getElementById('graph-container');
  const data = { nodes, edges };

  const options = {
    nodes: {
      shape: 'circle',
      color: '#79B4B7',
      font: { color: '#fff', size: 18 }
    },
    edges: {
      color: '#444',
      arrows: { to: { enabled: true, scaleFactor: 1 } },
      smooth: { type: 'cubicBezier', forceDirection: 'horizontal', roundness: 0.4 },
      font: {
        color: 'black',
        strokeWidth: 0,
        size: 14
      }
    },
    physics: {
      enabled: true,
      solver: 'forceAtlas2Based'
    }
  };

  new vis.Network(container, data, options);
}

function deleteLargestCycle() {
  const rows = document.querySelectorAll("#edges-table tbody tr");
  const edges = [];
  const edgeElements = [];

  rows.forEach((row) => {
    const inputs = row.querySelectorAll("input");
    if (inputs.length >= 2) {
      const from = parseInt(inputs[0].value);
      const to = parseInt(inputs[1].value);
      if (!isNaN(from) && !isNaN(to)) {
        edges.push([from, to]);
        edgeElements.push({ from, to, element: row });
      }
    }
  });

  const graph = buildGraph(edges);
  const allCycles = [];

  for (let startNode of graph.keys()) {
    const visited = new Set();
    dfs(graph, startNode, startNode, visited, [], allCycles);
  }

  const uniqueCycles = filterUniqueCycles(allCycles);
  if (uniqueCycles.length === 0) {
    alert("–¶–∏–∫–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
    return;
  }

  const largestCycle = uniqueCycles.reduce((max, cycle) =>
    cycle.length > max.length ? cycle : max
  );

  const cycleEdges = [];
  for (let i = 0; i < largestCycle.length - 1; i++) {
    cycleEdges.push([largestCycle[i], largestCycle[i + 1]]);
  }

  // –£–¥–∞–ª—è–µ–º —Ä—ë–±—Ä–∞ –∏–∑ DOM (—Ç–∞–±–ª–∏—Ü—ã)
  cycleEdges.forEach(([from, to]) => {
    for (let i = 0; i < edgeElements.length; i++) {
      const edge = edgeElements[i];
      if (
        (edge.from === from && edge.to === to) ||
        (edge.from === to && edge.to === from)
      ) {
        edge.element.remove();
        edgeElements.splice(i, 1); // –£–¥–∞–ª–∏–º –∏–∑ –º–∞—Å—Å–∏–≤–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
        break;
      }
    }
  });

  // –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º k
  const newRows = document.querySelectorAll("#edges-table tbody tr");
  newRows.forEach((row, index) => {
    row.cells[0].innerText = index + 1;
  });

  k = newRows.length + 1;

  drawGraph();
}

// –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ
function buildGraph(edges) {
  const graph = new Map();
  edges.forEach(([from, to]) => {
    if (!graph.has(from)) graph.set(from, []);
    if (!graph.has(to)) graph.set(to, []);
    graph.get(from).push(to);
    graph.get(to).push(from); // –µ—Å–ª–∏ –≥—Ä–∞—Ñ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚Äî —É–±–µ—Ä–∏ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
  });
  return graph;
}

// DFS –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ü–∏–∫–ª–æ–≤
function dfs(graph, current, target, visited, path, cycles) {
  visited.add(current);
  path.push(current);

  for (let neighbor of graph.get(current)) {
    if (neighbor === target && path.length > 2) {
      cycles.push([...path, target]); // –Ω–∞—à–ª–∏ —Ü–∏–∫–ª
    } else if (!visited.has(neighbor)) {
      dfs(graph, neighbor, target, new Set(visited), [...path], cycles);
    }
  }
}

// –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ü–∏–∫–ª–æ–≤
function filterUniqueCycles(cycles) {
  const seen = new Set();
  const unique = [];

  for (let cycle of cycles) {
    const norm = normalizeCycle(cycle);
    const key = norm.join("-");
    if (!seen.has(key)) {
      seen.add(key);
      unique.push(norm);
    }
  }

  return unique;
}

function normalizeCycle(cycle) {
  const minIndex = cycle.reduce((minIdx, val, idx, arr) => val < arr[minIdx] ? idx : minIdx, 0);
  const rotated = [...cycle.slice(minIndex), ...cycle.slice(0, minIndex)];
  return rotated;
}


function getAdjacencyMatrix(edges) {
  // –ù–∞–π–¥—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤–µ—Ä—à–∏–Ω—ã
  let maxNode = 0;
  edges.forEach(([from, to]) => {
    maxNode = Math.max(maxNode, from, to);
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É –Ω—É–ª—è–º–∏
  const matrix = Array.from({ length: maxNode }, () =>
    Array(maxNode + 1).fill(0)
  );

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É: –¥–ª—è –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ [from][to] –∏ [to][from]
  edges.forEach(([from, to]) => {
    matrix[from - 1][to - 1] = 1;
    matrix[to - 1][from - 1] = 1;
  });

  return matrix;
}

function showCyclesExceptLargest() {
  const rows = document.querySelectorAll("#edges-table tbody tr");
  const edges = [];

  rows.forEach((row) => {
    const inputs = row.querySelectorAll("input");
    if (inputs.length >= 2) {
      const from = parseInt(inputs[0].value);
      const to = parseInt(inputs[1].value);
      if (!isNaN(from) && !isNaN(to)) {
        edges.push([from, to]);
      }
    }
  });

  const graph = buildGraph(edges);
  const allCycles = [];

  for (let startNode of graph.keys()) {
    const visited = new Set();
    dfs(graph, startNode, startNode, visited, [], allCycles);
  }

  const uniqueCycles = filterUniqueCycles(allCycles);
  const outputDiv = document.getElementById("cycles-list");

  if (uniqueCycles.length === 0) {
    outputDiv.innerHTML = "<em>–¶–∏–∫–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</em>";
    return;
  }

  const largest = uniqueCycles.reduce((max, cycle) => cycle.length > max.length ? cycle : max, []);
  const filtered = uniqueCycles.filter(cycle => cycle.join() !== largest.join());

  if (filtered.length === 0) {
    outputDiv.innerHTML = "<em>–î—Ä—É–≥–∏—Ö —Ü–∏–∫–ª–æ–≤, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</em>";
    return;
  }

  // üî• –£–¥–∞–ª–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥—É
  const seen = new Set();
  const uniqueDisplay = [];

  for (let cycle of filtered) {
    const key = normalizeCycle(cycle).join("-");
    if (!seen.has(key)) {
      seen.add(key);
      uniqueDisplay.push(cycle);
    }
  }

  outputDiv.innerHTML = uniqueDisplay
    .map((cycle, idx) => `–¶–∏–∫–ª ${idx + 1}: [${cycle.join(" ‚Üí ")}]`)
    .join("<br>");
}

function normalizeCycle(cycle) {
  const path = cycle.slice(0, -1);
  const rotations = path.map((_, i) => path.slice(i).concat(path.slice(0, i)));
  const reversed = rotations.map(r => [...r].reverse());
  const all = rotations.concat(reversed);
  all.sort((a, b) => a.join(',').localeCompare(b.join(',')));
  const canonical = all[0];
  return [...canonical, canonical[0]];
}
